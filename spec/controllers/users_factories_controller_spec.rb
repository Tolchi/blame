require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersFactoriesController do
#
#  # This should return the minimal set of attributes required to create a valid
#  # UsersFactory. As you add validations to UsersFactory, be sure to
#  # update the return value of this method accordingly.
#  def valid_attributes
#    { "email" => "MyString" }
#  end
#
#  # This should return the minimal set of values that should be in the session
#  # in order to pass any filters (e.g. authentication) defined in
#  # UsersFactoriesController. Be sure to keep this updated too.
#  def valid_session
#    {}
#  end
#
#  describe "GET index" do
#    it "assigns all users_factories as @users_factories" do
#      users_factory = UsersFactory.create! valid_attributes
#      get :index, {}, valid_session
#      assigns(:users_factories).should eq([users_factory])
#    end
#  end
#
#  describe "GET show" do
#    it "assigns the requested users_factory as @users_factory" do
#      users_factory = UsersFactory.create! valid_attributes
#      get :show, {:id => users_factory.to_param}, valid_session
#      assigns(:users_factory).should eq(users_factory)
#    end
#  end
#
#  describe "GET new" do
#    it "assigns a new users_factory as @users_factory" do
#      get :new, {}, valid_session
#      assigns(:users_factory).should be_a_new(UsersFactory)
#    end
#  end
#
#  describe "GET edit" do
#    it "assigns the requested users_factory as @users_factory" do
#      users_factory = UsersFactory.create! valid_attributes
#      get :edit, {:id => users_factory.to_param}, valid_session
#      assigns(:users_factory).should eq(users_factory)
#    end
#  end
#
#  describe "POST create" do
#    describe "with valid params" do
#      it "creates a new UsersFactory" do
#        expect {
#          post :create, {:users_factory => valid_attributes}, valid_session
#        }.to change(UsersFactory, :count).by(1)
#      end
#
#      it "assigns a newly created users_factory as @users_factory" do
#        post :create, {:users_factory => valid_attributes}, valid_session
#        assigns(:users_factory).should be_a(UsersFactory)
#        assigns(:users_factory).should be_persisted
#      end
#
#      it "redirects to the created users_factory" do
#        post :create, {:users_factory => valid_attributes}, valid_session
#        response.should redirect_to(UsersFactory.last)
#      end
#    end
#
#    describe "with invalid params" do
#      it "assigns a newly created but unsaved users_factory as @users_factory" do
#        # Trigger the behavior that occurs when invalid params are submitted
#        UsersFactory.any_instance.stub(:save).and_return(false)
#        post :create, {:users_factory => { "email" => "invalid value" }}, valid_session
#        assigns(:users_factory).should be_a_new(UsersFactory)
#      end
#
#      it "re-renders the 'new' template" do
#        # Trigger the behavior that occurs when invalid params are submitted
#        UsersFactory.any_instance.stub(:save).and_return(false)
#        post :create, {:users_factory => { "email" => "invalid value" }}, valid_session
#        response.should render_template("new")
#      end
#    end
#  end
#
#  describe "PUT update" do
#    describe "with valid params" do
#      it "updates the requested users_factory" do
#        users_factory = UsersFactory.create! valid_attributes
#        # Assuming there are no other users_factories in the database, this
#        # specifies that the UsersFactory created on the previous line
#        # receives the :update_attributes message with whatever params are
#        # submitted in the request.
#        UsersFactory.any_instance.should_receive(:update_attributes).with({ "email" => "MyString" })
#        put :update, {:id => users_factory.to_param, :users_factory => { "email" => "MyString" }}, valid_session
#      end
#
#      it "assigns the requested users_factory as @users_factory" do
#        users_factory = UsersFactory.create! valid_attributes
#        put :update, {:id => users_factory.to_param, :users_factory => valid_attributes}, valid_session
#        assigns(:users_factory).should eq(users_factory)
#      end
#
#      it "redirects to the users_factory" do
#        users_factory = UsersFactory.create! valid_attributes
#        put :update, {:id => users_factory.to_param, :users_factory => valid_attributes}, valid_session
#        response.should redirect_to(users_factory)
#      end
#    end
#
#    describe "with invalid params" do
#      it "assigns the users_factory as @users_factory" do
#        users_factory = UsersFactory.create! valid_attributes
#        # Trigger the behavior that occurs when invalid params are submitted
#        UsersFactory.any_instance.stub(:save).and_return(false)
#        put :update, {:id => users_factory.to_param, :users_factory => { "email" => "invalid value" }}, valid_session
#        assigns(:users_factory).should eq(users_factory)
#      end
#
#      it "re-renders the 'edit' template" do
#        users_factory = UsersFactory.create! valid_attributes
#        # Trigger the behavior that occurs when invalid params are submitted
#        UsersFactory.any_instance.stub(:save).and_return(false)
#        put :update, {:id => users_factory.to_param, :users_factory => { "email" => "invalid value" }}, valid_session
#        response.should render_template("edit")
#      end
#    end
#  end
#
#  describe "DELETE destroy" do
#    it "destroys the requested users_factory" do
#      users_factory = UsersFactory.create! valid_attributes
#      expect {
#        delete :destroy, {:id => users_factory.to_param}, valid_session
#      }.to change(UsersFactory, :count).by(-1)
#    end
#
#    it "redirects to the users_factories list" do
#      users_factory = UsersFactory.create! valid_attributes
#      delete :destroy, {:id => users_factory.to_param}, valid_session
#      response.should redirect_to(users_factories_url)
#    end
#  end
#
end












